# -*- coding: utf-8 -*-
"""whisper_fine_tuning_librispeech_vfinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aB8pvH_9fv5dOa-xAT5NY9ln6dtYrai7
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# 
# !pip install datasets>=2.6.1
# !pip install git+https://github.com/huggingface/transformers
# !pip install librosa
# !pip install evaluate>=0.30
# !pip install jiwer
# !pip install gradio
# !pip install accelerate -U
# !pip install -U transformers

import pandas as pd
from datasets import Dataset, load_dataset, DatasetDict
import os
import librosa
import numpy as np
from transformers import WhisperFeatureExtractor
from transformers import WhisperTokenizer
from transformers import WhisperProcessor
from datasets import Audio
from collections import OrderedDict
import evaluate
from transformers import WhisperForConditionalGeneration
from transformers import Seq2SeqTrainingArguments
from transformers import Seq2SeqTrainer

from google.colab import drive
drive.mount('/content/gdrive')
!ln -s /content/gdrive/My\ Drive/ /mydrive
!ls /mydrive

#!tar -xf /content/gdrive/MyDrive/speech-text_custom_train_all_pretrained/fine_tune_whisper_v2/test-clean.tar.gz -C /content/librispeech_asr_dataset

#!pip install torchaudio datasets pydub
from datasets import load_dataset
#load daatest locallyy folder
#dataset = load_dataset("audiofolder", data_dir="/content/librispeech_asr_dataset/LibriSpeech/test-clean",  drop_labels=True)
dataset= load_dataset("CristianaLazar/librispeech5k_train")

dataset

dataset["train"] = dataset.pop("train.360")

dataset

dataset['train']['audio'][1:10]

'''
import os
import librosa
import numpy as np
from tqdm import tqdm

# Replace 'path_to_test_clean_dataset' with the actual path to your downloaded dataset
dataset_path = '/content/test-clean'

# Create empty lists to store audio data and corresponding transcriptions
audio_data = []
transcriptions = []

# Iterate through the directories in the dataset path
for speaker_folder in tqdm(os.listdir(dataset_path), desc="Processing Speakers", unit="speaker"):
    speaker_path = os.path.join(dataset_path, speaker_folder)

    # Check if the item in the directory is a folder
    if os.path.isdir(speaker_path):
        # Iterate through the subdirectories (containing audio files) in the speaker folder
        for subfolder in os.listdir(speaker_path):
            subfolder_path = os.path.join(speaker_path, subfolder)

            # Check if the item in the subdirectory is a folder
            if os.path.isdir(subfolder_path):
                # Find audio files in the subdirectory
                audio_files = [file for file in os.listdir(subfolder_path) if file.endswith('.flac')]

                # Assuming there is only one transcription file in the subdirectory
                transcription_file = [file for file in os.listdir(subfolder_path) if file.endswith('.trans.txt')][0]
                transcription_file_path = os.path.join(subfolder_path, transcription_file)

                # Read transcription
                with open(transcription_file_path, 'r') as transcription_file:
                    transcription = transcription_file.read().strip()

                # Process each audio file in the subdirectory
                for audio_file in audio_files:
                    audio_file_path = os.path.join(subfolder_path, audio_file)

                    # Load audio file
                    audio, _ = librosa.load(audio_file_path, sr=None)

                    # Append audio data and transcription to lists
                    audio_data.append(audio)
                    transcriptions.append(transcription)

# Convert lists to numpy arrays if needed
audio_data = np.array(audio_data)
transcriptions = np.array(transcriptions)

# Now you can use 'audio_data' and 'transcriptions' in your machine learning pipeline
'''

#dataset = load_dataset("audiofolder", data_dir="./audio_folder/", split="train")
#dataset= load_dataset("mozilla-foundation/common_voice_11_0", "en", split="test")
#dataset= load_dataset("librispeech_asr", split="validation.clean")
#dataset= load_dataset("/content/librispeech_asr_dataset/LibriSpeech/test-clean")
#dataset = load_dataset("./test-clean/", split="train")
#train_test = dataset.train_test_split(test_size=0.22)
#common_voice = DatasetDict(train_test)
#print(common_voice)

#dataset = dataset.shuffle(seed=42).select([i for i in range(1000)])
#dataset

train_test = dataset['train'].train_test_split(test_size=0.22)
common_voice = DatasetDict(train_test)
print(common_voice)

for i in range(len(common_voice["train"])):
    print("Audio: ",common_voice["train"][i]['audio']['path'])
    print("Sentence: ",common_voice["train"][i]['sentence'])
print("\n\n")
for i in range(len(common_voice["test"])):
     print("Audio: ",common_voice["test"][i]['audio']['path'])
     print("Sentence: ",common_voice["test"][i]['sentence'])

#common_voice = common_voice.remove_columns(["accent", "age", "client_id", "down_votes", "gender", "locale", "path", "segment", "up_votes"])
common_voice = common_voice.remove_columns(["file",  'speaker_id', 'chapter_id', 'id', 'input_features', 'labels'])

print(common_voice)

# Rename the 'text' column to 'sentence' in the train split
common_voice["train"] = common_voice["train"].rename_column("text", "sentence")

# Rename the 'text' column to 'sentence' in the test split
common_voice["test"] = common_voice["test"].rename_column("text", "sentence")
common_voice

feature_extractor = WhisperFeatureExtractor.from_pretrained("openai/whisper-base")
tokenizer = WhisperTokenizer.from_pretrained("openai/whisper-base", language="english", task="transcribe")
tokenizer.save_pretrained("tokenizer/")
processor = WhisperProcessor.from_pretrained("openai/whisper-base", language="english", task="transcribe")

input_str = common_voice["train"][0]["sentence"]
labels = tokenizer(input_str).input_ids
decoded_with_special = tokenizer.decode(labels, skip_special_tokens=False)
decoded_str = tokenizer.decode(labels, skip_special_tokens=True)

print(f"Input:                 {input_str}")
print(f"Decoded w/ special:    {decoded_with_special}")
print(f"Decoded w/out s>pecial: {decoded_str}")
print(f"Are equal:             {input_str == decoded_str}")

print(common_voice["train"][0]['audio'])

common_voice = common_voice.cast_column("audio", Audio(sampling_rate=16000))

print(common_voice["train"][0])

def prepare_dataset(batch):
    # load and resample audio data from 48 to 16kHz
    audio = batch["audio"]
    print(audio)
    # compute log-Mel input features from input audio array
    batch["input_features"] = feature_extractor(audio["array"], sampling_rate=audio["sampling_rate"]).input_features[0]

    # encode target text to label ids
    batch["labels"] = tokenizer(batch["sentence"]).input_ids
    return batch

common_voice = common_voice.map(prepare_dataset, remove_columns=common_voice.column_names["train"])

common_voice

import torch

from dataclasses import dataclass
from typing import Any, Dict, List, Union

@dataclass
class DataCollatorSpeechSeq2SeqWithPadding:
    processor: Any

    def __call__(self, features: List[Dict[str, Union[List[int], torch.Tensor]]]) -> Dict[str, torch.Tensor]:
        # split inputs and labels since they have to be of different lengths and need different padding methods
        # first treat the audio inputs by simply returning torch tensors
        input_features = [{"input_features": feature["input_features"]} for feature in features]
        batch = self.processor.feature_extractor.pad(input_features, return_tensors="pt")

        # get the tokenized label sequences
        label_features = [{"input_ids": feature["labels"]} for feature in features]
        # pad the labels to max length
        labels_batch = self.processor.tokenizer.pad(label_features, return_tensors="pt")

        # replace padding with -100 to ignore loss correctly
        labels = labels_batch["input_ids"].masked_fill(labels_batch.attention_mask.ne(1), -100)

        # if bos token is appended in previous tokenization step,
        # cut bos token here as it's append later anyways
        if (labels[:, 0] == self.processor.tokenizer.bos_token_id).all().cpu().item():
            labels = labels[:, 1:]

        batch["labels"] = labels

        return batch

data_collator = DataCollatorSpeechSeq2SeqWithPadding(processor=processor)

metric = evaluate.load("wer")

def compute_metrics(pred):
    pred_ids = pred.predictions
    label_ids = pred.label_ids

    # replace -100 with the pad_token_id
    label_ids[label_ids == -100] = tokenizer.pad_token_id

    # we do not want to group tokens when computing the metrics
    pred_str = tokenizer.batch_decode(pred_ids, skip_special_tokens=True)
    label_str = tokenizer.batch_decode(label_ids, skip_special_tokens=True)

    wer = 100 * metric.compute(predictions=pred_str, references=label_str)

    return {"wer": wer}

model = WhisperForConditionalGeneration.from_pretrained("openai/whisper-base")

model.config.forced_decoder_ids = None
model.config.suppress_tokens = []

training_args = Seq2SeqTrainingArguments(
    output_dir="./whisper-base-pron",
    per_device_train_batch_size=16,
    gradient_accumulation_steps=1,
    learning_rate=1e-5,
    warmup_steps=100,
    max_steps=500,  # Set max_steps to 100 for 100 iterations
    fp16=True,
    evaluation_strategy="steps",
    per_device_eval_batch_size=8,
    predict_with_generate=True,
    generation_max_length=225,
    save_steps=100,  # Save every 100 steps
    eval_steps=100,  # Evaluate every 100 steps
    logging_steps=25,
    report_to=["tensorboard"],
    load_best_model_at_end=True,
    metric_for_best_model="wer",
    greater_is_better=False,
    push_to_hub=False,
)

from transformers import Seq2SeqTrainingArguments

training_args = Seq2SeqTrainingArguments(
    output_dir="./whisper-base-pron",  # change to a repo name of your choice
    per_device_train_batch_size=16,
    gradient_accumulation_steps=1,  # increase by 2x for every 2x decrease in batch size
    learning_rate=1e-5,
    warmup_steps=500,
    max_steps=1000,
    gradient_checkpointing=True,
    fp16=True,
    evaluation_strategy="steps",
    per_device_eval_batch_size=8,
    predict_with_generate=True,
    generation_max_length=225,
    save_steps=500,
    eval_steps=500,
    logging_steps=25,
    report_to=["tensorboard"],
    load_best_model_at_end=True,
    metric_for_best_model="wer",
    greater_is_better=False,
    push_to_hub=True,
)

trainer = Seq2SeqTrainer(
    args=training_args,
    model=model,
    train_dataset=common_voice["train"],
    eval_dataset=common_voice["test"],
    data_collator=data_collator,
    compute_metrics=compute_metrics,
    tokenizer=processor.feature_extractor,
)

import torch
torch.cuda.empty_cache()

from huggingface_hub import notebook_login

notebook_login()

trainer.train()

#trainer.save_model("/content/whisper_trained")

from transformers import pipeline
import gradio as gr

tokenizer = WhisperTokenizer.from_pretrained('./tokenizer/', language="english", task="transcribe")
# model = WhisperForConditionalGeneration.from_pretrained("./whisper-base-pron")

pipe = pipeline("automatic-speech-recognition", model="./whisper-base-pron", tokenizer=tokenizer)

def transcribe(audio):
    text = pipe(audio)["text"]
    return text

print(pipe)

from transformers import pipeline
import gradio as gr

tokenizer = WhisperTokenizer.from_pretrained('./tokenizer/', language="english", task="transcribe")
# model = WhisperForConditionalGeneration.from_pretrained("./whisper-base-pron")

#pipe = pipeline("automatic-speech-recognition", model="./whisper-base-pron", tokenizer=tokenizer)
pipe = pipeline("automatic-speech-recognition", model="/content/whisper-base-pron/checkpoint-1000", tokenizer=tokenizer)

def transcribe(audio):
    text = pipe(audio)["text"]
    return text

# Test on the given audio file
audio_path = "/content/2086-149220-0033.wav"  # Replace with the actual path
result = transcribe(audio_path)
print(result)

!wget https://dldata-public.s3.us-east-2.amazonaws.com/2086-149220-0033.wav

'''
iface = gr.Interface(
    fn=transcribe,
    inputs=gr.Audio(source="microphone", type="filepath"),
    outputs="text",
    title="Whisper Small Pronunciation",
    description="Realtime demo for English speech recognition using a fine-tuned Whisper base model.",
)

iface.launch()
'''

#upload to hgugging face

kwargs = {
    "dataset_tags": "CristianaLazar/librispeech5k_train",
    "dataset": "librispeech5k_train",  # a 'pretty' name for the training dataset
    "language": "en",
    "model_name": "openai/whisper-base - Manish Kumar",  # a 'pretty' name for your model
    "finetuned_from": "openai/whisper-base",
    "tasks": "automatic-speech-recognition",
    "tags": "hf-asr-leaderboard",
}

#The training results can now be uploaded to the Hub. To do so, execute the push_to_hub command:

trainer.push_to_hub(**kwargs)

!rm -rf /content/whisper-base-pron/checkpoint-500

!cp -r /content/tokenizer /content/gdrive/MyDrive/speech-text_custom_train_all_pretrained/fine_tune_whisper_v2







































